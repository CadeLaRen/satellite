
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'x\xc1R\xc3\xdb\xa8C\x8b\tw\x93uj\xbe\x87\xef'
    
_lr_action_items = {'RETURN':([2,4,6,9,22,23,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-8,-10,-9,-2,-1,-17,-14,-13,-11,-12,-15,-25,-16,-1,-1,-24,49,-19,-23,-18,]),'ARROW':([37,45,],[41,48,]),'NUMBER':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,41,42,43,46,47,48,49,50,52,],[-1,2,-8,2,-10,-9,2,-2,2,2,2,2,2,2,-1,-17,2,37,-14,-13,-11,-12,-15,2,-16,45,-1,-1,2,2,51,2,-23,-18,]),'WHILE':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-1,3,-8,3,-10,-9,3,-2,3,3,3,3,3,3,-1,-17,3,-14,-13,-11,-12,-15,3,-16,-1,-1,3,3,3,-23,-18,]),'MINUS':([2,4,6,9,13,16,22,23,27,28,29,30,31,32,33,42,46,49,50,52,],[-8,-10,-9,20,20,20,-1,20,-14,-13,-11,-12,-15,-25,20,-1,-24,-19,-23,20,]),'STRING':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-1,6,-8,6,-10,-9,6,-2,6,6,6,6,6,6,-1,-17,6,-14,-13,-11,-12,-15,6,-16,-1,-1,6,6,6,-23,-18,]),'RPAREN':([34,35,36,44,],[39,-22,-20,-21,]),'PLUS':([2,4,6,9,13,16,22,23,27,28,29,30,31,32,33,42,46,49,50,52,],[-8,-10,-9,19,19,19,-1,19,-14,-13,-11,-12,-15,-25,19,-1,-24,-19,-23,19,]),'COLON':([2,4,6,9,13,22,23,27,28,29,30,31,32,33,38,39,42,45,46,49,50,51,52,],[-8,-10,-9,-2,22,-1,-17,-14,-13,-11,-12,-15,-25,-16,42,43,-1,-26,-24,-19,-23,-27,-18,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,10,11,12,14,17,18,19,20,21,22,23,24,25,27,28,29,30,31,32,33,40,42,43,46,47,49,50,52,],[-1,4,-8,4,-10,15,-6,4,-3,-2,-4,-7,-5,4,4,4,4,4,4,-1,-17,4,36,-14,-13,-11,-12,-15,4,-16,36,-1,-1,4,4,4,-23,-18,]),'$end':([0,1,2,4,6,9,22,23,27,28,29,30,31,32,33,42,46,49,50,52,],[-1,0,-8,-10,-9,-2,-1,-17,-14,-13,-11,-12,-15,-25,-16,-1,-24,-19,-23,-18,]),'DIVIDE':([2,4,6,9,13,16,22,23,27,28,29,30,31,32,33,42,46,49,50,52,],[-8,-10,-9,17,17,17,-1,17,-14,-13,17,17,-15,-25,17,-1,-24,-19,-23,17,]),'FOR':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-1,7,-8,7,-10,-9,7,-2,7,7,7,7,7,7,-1,-17,7,-14,-13,-11,-12,-15,7,-16,-1,-1,7,7,7,-23,-18,]),'EQUALS':([4,15,],[14,24,]),'TIMES':([2,4,6,9,13,16,22,23,27,28,29,30,31,32,33,42,46,49,50,52,],[-8,-10,-9,18,18,18,-1,18,-14,-13,18,18,-15,-25,18,-1,-24,-19,-23,18,]),'LPAREN':([15,],[25,]),'IN':([2,4,6,9,16,22,23,27,28,29,30,31,32,33,42,46,49,50,52,],[-8,-10,-9,-2,26,-1,-17,-14,-13,-11,-12,-15,-25,-16,-1,-24,-19,-23,-18,]),'INT':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-1,8,-8,8,-10,-9,8,-2,8,8,8,8,8,8,-1,-17,8,-14,-13,-11,-12,-15,8,-16,-1,-1,8,8,8,-23,-18,]),'DOUBLE':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-1,12,-8,12,-10,-9,12,-2,12,12,12,12,12,12,-1,-17,12,-14,-13,-11,-12,-15,12,-16,-1,-1,12,12,12,-23,-18,]),'FLOAT':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-1,10,-8,10,-10,-9,10,-2,10,10,10,10,10,10,-1,-17,10,-14,-13,-11,-12,-15,10,-16,-1,-1,10,10,10,-23,-18,]),'BOOL':([0,1,2,3,4,6,7,9,14,17,18,19,20,21,22,23,24,27,28,29,30,31,32,33,42,43,46,47,49,50,52,],[-1,11,-8,11,-10,-9,11,-2,11,11,11,11,11,11,-1,-17,11,-14,-13,-11,-12,-15,11,-16,-1,-1,11,11,11,-23,-18,]),'COMMA':([34,35,36,44,],[40,-22,-20,-21,]),'MOD':([2,4,6,9,13,16,22,23,27,28,29,30,31,32,33,42,46,49,50,52,],[-8,-10,-9,21,21,21,-1,21,-14,-13,21,21,-15,-25,21,-1,-24,-19,-23,21,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameters':([25,],[34,]),'expr':([1,3,7,14,17,18,19,20,21,24,32,46,47,49,],[9,13,16,23,27,28,29,30,31,33,9,9,9,52,]),'return_statement':([47,],[50,]),'range':([26,],[38,]),'type':([1,3,7,14,17,18,19,20,21,24,32,46,47,49,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'explist':([0,22,42,43,],[1,32,46,47,]),'parameter':([25,40,],[35,44,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> explist","S'",1,None,None,None),
  ('explist -> <empty>','explist',0,'p_explist','meccaParser.py',11),
  ('explist -> explist expr','explist',2,'p_explist','meccaParser.py',12),
  ('type -> INT','type',1,'p_type','meccaParser.py',20),
  ('type -> FLOAT','type',1,'p_type','meccaParser.py',21),
  ('type -> DOUBLE','type',1,'p_type','meccaParser.py',22),
  ('type -> STRING','type',1,'p_type','meccaParser.py',23),
  ('type -> BOOL','type',1,'p_type','meccaParser.py',24),
  ('expr -> NUMBER','expr',1,'p_expr_number','meccaParser.py',29),
  ('expr -> STRING','expr',1,'p_expr_string','meccaParser.py',33),
  ('expr -> IDENTIFIER','expr',1,'p_expr_identifier','meccaParser.py',37),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','meccaParser.py',41),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','meccaParser.py',42),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binary','meccaParser.py',43),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','meccaParser.py',44),
  ('expr -> expr MOD expr','expr',3,'p_expr_binary','meccaParser.py',45),
  ('expr -> type IDENTIFIER EQUALS expr','expr',4,'p_expr_initialize','meccaParser.py',58),
  ('expr -> IDENTIFIER EQUALS expr','expr',3,'p_expr_assign','meccaParser.py',62),
  ('return_statement -> RETURN expr','return_statement',2,'p_return_statement','meccaParser.py',66),
  ('return_statement -> RETURN','return_statement',1,'p_return_statement','meccaParser.py',67),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','meccaParser.py',71),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','meccaParser.py',75),
  ('parameters -> parameter','parameters',1,'p_parameters','meccaParser.py',76),
  ('expr -> type IDENTIFIER LPAREN parameters RPAREN COLON explist return_statement','expr',8,'p_function_declaration','meccaParser.py',83),
  ('expr -> FOR expr IN range COLON explist','expr',6,'p_for','meccaParser.py',87),
  ('expr -> WHILE expr COLON explist','expr',4,'p_while','meccaParser.py',91),
  ('range -> NUMBER ARROW NUMBER','range',3,'p_range','meccaParser.py',95),
  ('range -> NUMBER ARROW NUMBER ARROW NUMBER','range',5,'p_range','meccaParser.py',96),
]
