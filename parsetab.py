
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = '\xacb\x0f\xcc\xea\xca\n\xda\x93\xa3V\xb3/\x13\x88\xa8'
    
_lr_action_items = {'DIVIDE':([2,4,6,9,18,19,20,21,22,23,25,],[-9,11,-8,-10,-14,-13,11,11,-15,11,11,]),'STRING':([0,1,2,4,6,9,11,12,13,14,15,16,18,19,20,21,22,23,24,25,],[-1,2,-9,-2,-8,-10,2,2,2,2,2,2,-14,-13,-11,-12,-15,-17,2,-16,]),'INT':([0,1,2,4,6,9,11,12,13,14,15,16,18,19,20,21,22,23,24,25,],[-1,3,-9,-2,-8,-10,3,3,3,3,3,3,-14,-13,-11,-12,-15,-17,3,-16,]),'DOUBLE':([0,1,2,4,6,9,11,12,13,14,15,16,18,19,20,21,22,23,24,25,],[-1,7,-9,-2,-8,-10,7,7,7,7,7,7,-14,-13,-11,-12,-15,-17,7,-16,]),'FLOAT':([0,1,2,4,6,9,11,12,13,14,15,16,18,19,20,21,22,23,24,25,],[-1,5,-9,-2,-8,-10,5,5,5,5,5,5,-14,-13,-11,-12,-15,-17,5,-16,]),'NUMBER':([0,1,2,4,6,9,11,12,13,14,15,16,18,19,20,21,22,23,24,25,],[-1,6,-9,-2,-8,-10,6,6,6,6,6,6,-14,-13,-11,-12,-15,-17,6,-16,]),'TIMES':([2,4,6,9,18,19,20,21,22,23,25,],[-9,12,-8,-10,-14,-13,12,12,-15,12,12,]),'EQUALS':([9,17,],[16,24,]),'BOOL':([0,1,2,4,6,9,11,12,13,14,15,16,18,19,20,21,22,23,24,25,],[-1,8,-9,-2,-8,-10,8,8,8,8,8,8,-14,-13,-11,-12,-15,-17,8,-16,]),'MOD':([2,4,6,9,18,19,20,21,22,23,25,],[-9,15,-8,-10,-14,-13,15,15,-15,15,15,]),'PLUS':([2,4,6,9,18,19,20,21,22,23,25,],[-9,13,-8,-10,-14,-13,-11,-12,-15,13,13,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,],[-1,9,-6,-3,-2,-4,-8,-5,-7,-10,17,9,9,9,9,9,9,-14,-13,-11,-12,-15,-17,9,-16,]),'MINUS':([2,4,6,9,18,19,20,21,22,23,25,],[-9,14,-8,-10,-14,-13,-11,-12,-15,14,14,]),'$end':([0,1,2,4,6,9,18,19,20,21,22,23,25,],[-1,0,-9,-2,-8,-10,-14,-13,-11,-12,-15,-17,-16,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expr':([1,11,12,13,14,15,16,24,],[4,18,19,20,21,22,23,25,]),'explist':([0,],[1,]),'type':([1,11,12,13,14,15,16,24,],[10,10,10,10,10,10,10,10,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> explist","S'",1,None,None,None),
  ('explist -> <empty>','explist',0,'p_explist','meccaParser.py',11),
  ('explist -> explist expr','explist',2,'p_explist','meccaParser.py',12),
  ('type -> INT','type',1,'p_type','meccaParser.py',20),
  ('type -> FLOAT','type',1,'p_type','meccaParser.py',21),
  ('type -> DOUBLE','type',1,'p_type','meccaParser.py',22),
  ('type -> STRING','type',1,'p_type','meccaParser.py',23),
  ('type -> BOOL','type',1,'p_type','meccaParser.py',24),
  ('expr -> NUMBER','expr',1,'p_expr_number','meccaParser.py',29),
  ('expr -> STRING','expr',1,'p_expr_string','meccaParser.py',33),
  ('expr -> IDENTIFIER','expr',1,'p_expr_identifier','meccaParser.py',37),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','meccaParser.py',41),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','meccaParser.py',42),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binary','meccaParser.py',43),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','meccaParser.py',44),
  ('expr -> expr MOD expr','expr',3,'p_expr_binary','meccaParser.py',45),
  ('expr -> type IDENTIFIER EQUALS expr','expr',4,'p_expr_initialize','meccaParser.py',58),
  ('expr -> IDENTIFIER EQUALS expr','expr',3,'p_expr_assign','meccaParser.py',62),
  ('return_statement -> RETURN expr','return_statement',2,'p_return_statement','meccaParser.py',66),
  ('return_statement -> RETURN','return_statement',1,'p_return_statement','meccaParser.py',67),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','meccaParser.py',71),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','meccaParser.py',75),
  ('parameters -> parameter','parameters',1,'p_parameters','meccaParser.py',76),
  ('statement -> type IDENTIFIER LPAREN parameters RPAREN COLON explist return_statement','statement',8,'p_function_declaration_statement','meccaParser.py',83),
  ('statement -> FOR expr IN range COLON explist COLON','statement',7,'p_for_statement','meccaParser.py',87),
  ('range -> NUMBER ARROW NUMBER','range',3,'p_range','meccaParser.py',91),
]
