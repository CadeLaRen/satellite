
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.2'

_lr_method = 'LALR'

_lr_signature = 'w\xd0\xdd\x0c\xbf\x93SdzOg\xc9\xb6\xa7\x866'
    
_lr_action_items = {'RETURN':([2,3,5,8,20,24,25,26,27,28,29,38,39,42,43,45,46,48,],[-8,-10,-9,-2,-17,-14,-13,-11,-12,-15,-16,-1,-1,-24,45,-19,-23,-18,]),'LPAREN':([13,],[22,]),'NUMBER':([0,1,2,3,5,6,8,12,15,16,17,18,19,20,21,23,24,25,26,27,28,29,37,38,39,42,43,44,45,46,48,],[-1,2,-8,-10,-9,2,-2,2,2,2,2,2,2,-17,2,33,-14,-13,-11,-12,-15,-16,41,-1,-1,2,2,47,2,-23,-18,]),'MINUS':([2,3,5,8,14,20,24,25,26,27,28,29,38,42,45,46,48,],[-8,-10,-9,18,18,18,-14,-13,-11,-12,-15,18,-1,-24,-19,-23,18,]),'STRING':([0,1,2,3,5,6,8,12,15,16,17,18,19,20,21,24,25,26,27,28,29,38,39,42,43,45,46,48,],[-1,5,-8,-10,-9,5,-2,5,5,5,5,5,5,-17,5,-14,-13,-11,-12,-15,-16,-1,-1,5,5,5,-23,-18,]),'RPAREN':([30,31,32,40,],[35,-22,-20,-21,]),'COLON':([34,35,41,47,],[38,39,-25,-26,]),'PLUS':([2,3,5,8,14,20,24,25,26,27,28,29,38,42,45,46,48,],[-8,-10,-9,17,17,17,-14,-13,-11,-12,-15,17,-1,-24,-19,-23,17,]),'IDENTIFIER':([0,1,2,3,4,5,6,7,8,9,10,11,12,15,16,17,18,19,20,21,22,24,25,26,27,28,29,36,38,39,42,43,45,46,48,],[-1,3,-8,-10,13,-6,3,-3,-2,-4,-7,-5,3,3,3,3,3,3,-17,3,32,-14,-13,-11,-12,-15,-16,32,-1,-1,3,3,3,-23,-18,]),'$end':([0,1,2,3,5,8,20,24,25,26,27,28,29,38,42,45,46,48,],[-1,0,-8,-10,-9,-2,-17,-14,-13,-11,-12,-15,-16,-1,-24,-19,-23,-18,]),'DIVIDE':([2,3,5,8,14,20,24,25,26,27,28,29,38,42,45,46,48,],[-8,-10,-9,15,15,15,-14,-13,15,15,-15,15,-1,-24,-19,-23,15,]),'FOR':([0,1,2,3,5,6,8,12,15,16,17,18,19,20,21,24,25,26,27,28,29,38,39,42,43,45,46,48,],[-1,6,-8,-10,-9,6,-2,6,6,6,6,6,6,-17,6,-14,-13,-11,-12,-15,-16,-1,-1,6,6,6,-23,-18,]),'EQUALS':([3,13,],[12,21,]),'TIMES':([2,3,5,8,14,20,24,25,26,27,28,29,38,42,45,46,48,],[-8,-10,-9,16,16,16,-14,-13,16,16,-15,16,-1,-24,-19,-23,16,]),'ARROW':([33,41,],[37,44,]),'IN':([2,3,5,8,14,20,24,25,26,27,28,29,38,42,45,46,48,],[-8,-10,-9,-2,23,-17,-14,-13,-11,-12,-15,-16,-1,-24,-19,-23,-18,]),'INT':([0,1,2,3,5,6,8,12,15,16,17,18,19,20,21,24,25,26,27,28,29,38,39,42,43,45,46,48,],[-1,7,-8,-10,-9,7,-2,7,7,7,7,7,7,-17,7,-14,-13,-11,-12,-15,-16,-1,-1,7,7,7,-23,-18,]),'DOUBLE':([0,1,2,3,5,6,8,12,15,16,17,18,19,20,21,24,25,26,27,28,29,38,39,42,43,45,46,48,],[-1,11,-8,-10,-9,11,-2,11,11,11,11,11,11,-17,11,-14,-13,-11,-12,-15,-16,-1,-1,11,11,11,-23,-18,]),'FLOAT':([0,1,2,3,5,6,8,12,15,16,17,18,19,20,21,24,25,26,27,28,29,38,39,42,43,45,46,48,],[-1,9,-8,-10,-9,9,-2,9,9,9,9,9,9,-17,9,-14,-13,-11,-12,-15,-16,-1,-1,9,9,9,-23,-18,]),'BOOL':([0,1,2,3,5,6,8,12,15,16,17,18,19,20,21,24,25,26,27,28,29,38,39,42,43,45,46,48,],[-1,10,-8,-10,-9,10,-2,10,10,10,10,10,10,-17,10,-14,-13,-11,-12,-15,-16,-1,-1,10,10,10,-23,-18,]),'COMMA':([30,31,32,40,],[36,-22,-20,-21,]),'MOD':([2,3,5,8,14,20,24,25,26,27,28,29,38,42,45,46,48,],[-8,-10,-9,19,19,19,-14,-13,19,19,-15,19,-1,-24,-19,-23,19,]),}

_lr_action = { }
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = { }
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parameters':([22,],[30,]),'expr':([1,6,12,15,16,17,18,19,21,42,43,45,],[8,14,20,24,25,26,27,28,29,8,8,48,]),'return_statement':([43,],[46,]),'range':([23,],[34,]),'type':([1,6,12,15,16,17,18,19,21,42,43,45,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'explist':([0,38,39,],[1,42,43,]),'parameter':([22,36,],[31,40,]),}

_lr_goto = { }
for _k, _v in _lr_goto_items.items():
   for _x,_y in zip(_v[0],_v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = { }
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> explist","S'",1,None,None,None),
  ('explist -> <empty>','explist',0,'p_explist','meccaParser.py',11),
  ('explist -> explist expr','explist',2,'p_explist','meccaParser.py',12),
  ('type -> INT','type',1,'p_type','meccaParser.py',20),
  ('type -> FLOAT','type',1,'p_type','meccaParser.py',21),
  ('type -> DOUBLE','type',1,'p_type','meccaParser.py',22),
  ('type -> STRING','type',1,'p_type','meccaParser.py',23),
  ('type -> BOOL','type',1,'p_type','meccaParser.py',24),
  ('expr -> NUMBER','expr',1,'p_expr_number','meccaParser.py',29),
  ('expr -> STRING','expr',1,'p_expr_string','meccaParser.py',33),
  ('expr -> IDENTIFIER','expr',1,'p_expr_identifier','meccaParser.py',37),
  ('expr -> expr PLUS expr','expr',3,'p_expr_binary','meccaParser.py',41),
  ('expr -> expr MINUS expr','expr',3,'p_expr_binary','meccaParser.py',42),
  ('expr -> expr TIMES expr','expr',3,'p_expr_binary','meccaParser.py',43),
  ('expr -> expr DIVIDE expr','expr',3,'p_expr_binary','meccaParser.py',44),
  ('expr -> expr MOD expr','expr',3,'p_expr_binary','meccaParser.py',45),
  ('expr -> type IDENTIFIER EQUALS expr','expr',4,'p_expr_initialize','meccaParser.py',58),
  ('expr -> IDENTIFIER EQUALS expr','expr',3,'p_expr_assign','meccaParser.py',62),
  ('return_statement -> RETURN expr','return_statement',2,'p_return_statement','meccaParser.py',66),
  ('return_statement -> RETURN','return_statement',1,'p_return_statement','meccaParser.py',67),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','meccaParser.py',71),
  ('parameters -> parameters COMMA parameter','parameters',3,'p_parameters','meccaParser.py',75),
  ('parameters -> parameter','parameters',1,'p_parameters','meccaParser.py',76),
  ('expr -> type IDENTIFIER LPAREN parameters RPAREN COLON explist return_statement','expr',8,'p_function_declaration','meccaParser.py',83),
  ('expr -> FOR expr IN range COLON explist','expr',6,'p_for','meccaParser.py',87),
  ('range -> NUMBER ARROW NUMBER','range',3,'p_range','meccaParser.py',91),
  ('range -> NUMBER ARROW NUMBER ARROW NUMBER','range',5,'p_range','meccaParser.py',92),
]
